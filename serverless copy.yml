service: sls

custom:
  settings:
    POSTS_TABLE: posts2

provider:
  name: aws
  runtime: nodejs12.x
  region: sa-east-1
  environment: ${self:custom.settings}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.POSTS_TABLE}'

functions:
  createPost:
    handler: handler.createPost
    events:
      - http:
          path: /post
          method: post
  getAllPosts:
    handler: handler.getAllPosts
    events:
      - http:
          path: /posts
          method: get
  getPosts:
    handler: handler.getPosts
    events:
      - http:
          path: /posts/{number}
          method: get
  getPost:
    handler: handler.getPost
    events:
      - http:
          path: /post/{id}
          method: get
  updatePost:
    handler: handler.updatePost
    events:
      - http:
          path: /post/{id}
          method: put
  deletePost:
    handler: handler.deletePost
    events:
      - http:
          path: /post/{id}
          method: delete

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: userId
            AttributeType: 'N'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: userId
            KeyType: 'RANGE'
        GlobalSecondaryIndexes:
          - IndexName: 'userIdX'
            KeySchema:
              - AttributeName: 'userId'
                KeyType: 'RANGE'
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        TableName: ${self:custom.settings.POSTS_TABLE}
